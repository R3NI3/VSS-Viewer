// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state.proto

#ifndef PROTOBUF_state_2eproto__INCLUDED
#define PROTOBUF_state_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace vss_state {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_state_2eproto();
void protobuf_AssignDesc_state_2eproto();
void protobuf_ShutdownFile_state_2eproto();

class Robot_State;
class Ball_State;
class Global_State;

// ===================================================================

class Robot_State : public ::google::protobuf::Message {
 public:
  Robot_State();
  virtual ~Robot_State();

  Robot_State(const Robot_State& from);

  inline Robot_State& operator=(const Robot_State& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot_State& default_instance();

  void Swap(Robot_State* other);

  // implements Message ----------------------------------------------

  Robot_State* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Robot_State& from);
  void MergeFrom(const Robot_State& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float yaw = 3;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 3;
  inline float yaw() const;
  inline void set_yaw(float value);

  // @@protoc_insertion_point(class_scope:vss_state.Robot_State)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_yaw();
  inline void clear_has_yaw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float yaw_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_state_2eproto();
  friend void protobuf_AssignDesc_state_2eproto();
  friend void protobuf_ShutdownFile_state_2eproto();

  void InitAsDefaultInstance();
  static Robot_State* default_instance_;
};
// -------------------------------------------------------------------

class Ball_State : public ::google::protobuf::Message {
 public:
  Ball_State();
  virtual ~Ball_State();

  Ball_State(const Ball_State& from);

  inline Ball_State& operator=(const Ball_State& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ball_State& default_instance();

  void Swap(Ball_State* other);

  // implements Message ----------------------------------------------

  Ball_State* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ball_State& from);
  void MergeFrom(const Ball_State& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:vss_state.Ball_State)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_state_2eproto();
  friend void protobuf_AssignDesc_state_2eproto();
  friend void protobuf_ShutdownFile_state_2eproto();

  void InitAsDefaultInstance();
  static Ball_State* default_instance_;
};
// -------------------------------------------------------------------

class Global_State : public ::google::protobuf::Message {
 public:
  Global_State();
  virtual ~Global_State();

  Global_State(const Global_State& from);

  inline Global_State& operator=(const Global_State& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Global_State& default_instance();

  void Swap(Global_State* other);

  // implements Message ----------------------------------------------

  Global_State* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Global_State& from);
  void MergeFrom(const Global_State& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .vss_state.Ball_State balls = 2;
  inline int balls_size() const;
  inline void clear_balls();
  static const int kBallsFieldNumber = 2;
  inline const ::vss_state::Ball_State& balls(int index) const;
  inline ::vss_state::Ball_State* mutable_balls(int index);
  inline ::vss_state::Ball_State* add_balls();
  inline const ::google::protobuf::RepeatedPtrField< ::vss_state::Ball_State >&
      balls() const;
  inline ::google::protobuf::RepeatedPtrField< ::vss_state::Ball_State >*
      mutable_balls();

  // repeated .vss_state.Robot_State robots_yellow = 3;
  inline int robots_yellow_size() const;
  inline void clear_robots_yellow();
  static const int kRobotsYellowFieldNumber = 3;
  inline const ::vss_state::Robot_State& robots_yellow(int index) const;
  inline ::vss_state::Robot_State* mutable_robots_yellow(int index);
  inline ::vss_state::Robot_State* add_robots_yellow();
  inline const ::google::protobuf::RepeatedPtrField< ::vss_state::Robot_State >&
      robots_yellow() const;
  inline ::google::protobuf::RepeatedPtrField< ::vss_state::Robot_State >*
      mutable_robots_yellow();

  // repeated .vss_state.Robot_State robots_blue = 4;
  inline int robots_blue_size() const;
  inline void clear_robots_blue();
  static const int kRobotsBlueFieldNumber = 4;
  inline const ::vss_state::Robot_State& robots_blue(int index) const;
  inline ::vss_state::Robot_State* mutable_robots_blue(int index);
  inline ::vss_state::Robot_State* add_robots_blue();
  inline const ::google::protobuf::RepeatedPtrField< ::vss_state::Robot_State >&
      robots_blue() const;
  inline ::google::protobuf::RepeatedPtrField< ::vss_state::Robot_State >*
      mutable_robots_blue();

  // @@protoc_insertion_point(class_scope:vss_state.Global_State)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::vss_state::Ball_State > balls_;
  ::google::protobuf::RepeatedPtrField< ::vss_state::Robot_State > robots_yellow_;
  ::google::protobuf::RepeatedPtrField< ::vss_state::Robot_State > robots_blue_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_state_2eproto();
  friend void protobuf_AssignDesc_state_2eproto();
  friend void protobuf_ShutdownFile_state_2eproto();

  void InitAsDefaultInstance();
  static Global_State* default_instance_;
};
// ===================================================================


// ===================================================================

// Robot_State

// required float x = 1;
inline bool Robot_State::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Robot_State::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Robot_State::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Robot_State::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Robot_State::x() const {
  return x_;
}
inline void Robot_State::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Robot_State::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robot_State::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Robot_State::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Robot_State::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Robot_State::y() const {
  return y_;
}
inline void Robot_State::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float yaw = 3;
inline bool Robot_State::has_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Robot_State::set_has_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Robot_State::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Robot_State::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float Robot_State::yaw() const {
  return yaw_;
}
inline void Robot_State::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
}

// -------------------------------------------------------------------

// Ball_State

// required float x = 1;
inline bool Ball_State::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ball_State::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ball_State::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ball_State::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Ball_State::x() const {
  return x_;
}
inline void Ball_State::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Ball_State::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ball_State::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ball_State::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ball_State::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Ball_State::y() const {
  return y_;
}
inline void Ball_State::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Global_State

// optional uint32 id = 1;
inline bool Global_State::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Global_State::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Global_State::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Global_State::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Global_State::id() const {
  return id_;
}
inline void Global_State::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated .vss_state.Ball_State balls = 2;
inline int Global_State::balls_size() const {
  return balls_.size();
}
inline void Global_State::clear_balls() {
  balls_.Clear();
}
inline const ::vss_state::Ball_State& Global_State::balls(int index) const {
  return balls_.Get(index);
}
inline ::vss_state::Ball_State* Global_State::mutable_balls(int index) {
  return balls_.Mutable(index);
}
inline ::vss_state::Ball_State* Global_State::add_balls() {
  return balls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vss_state::Ball_State >&
Global_State::balls() const {
  return balls_;
}
inline ::google::protobuf::RepeatedPtrField< ::vss_state::Ball_State >*
Global_State::mutable_balls() {
  return &balls_;
}

// repeated .vss_state.Robot_State robots_yellow = 3;
inline int Global_State::robots_yellow_size() const {
  return robots_yellow_.size();
}
inline void Global_State::clear_robots_yellow() {
  robots_yellow_.Clear();
}
inline const ::vss_state::Robot_State& Global_State::robots_yellow(int index) const {
  return robots_yellow_.Get(index);
}
inline ::vss_state::Robot_State* Global_State::mutable_robots_yellow(int index) {
  return robots_yellow_.Mutable(index);
}
inline ::vss_state::Robot_State* Global_State::add_robots_yellow() {
  return robots_yellow_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vss_state::Robot_State >&
Global_State::robots_yellow() const {
  return robots_yellow_;
}
inline ::google::protobuf::RepeatedPtrField< ::vss_state::Robot_State >*
Global_State::mutable_robots_yellow() {
  return &robots_yellow_;
}

// repeated .vss_state.Robot_State robots_blue = 4;
inline int Global_State::robots_blue_size() const {
  return robots_blue_.size();
}
inline void Global_State::clear_robots_blue() {
  robots_blue_.Clear();
}
inline const ::vss_state::Robot_State& Global_State::robots_blue(int index) const {
  return robots_blue_.Get(index);
}
inline ::vss_state::Robot_State* Global_State::mutable_robots_blue(int index) {
  return robots_blue_.Mutable(index);
}
inline ::vss_state::Robot_State* Global_State::add_robots_blue() {
  return robots_blue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vss_state::Robot_State >&
Global_State::robots_blue() const {
  return robots_blue_;
}
inline ::google::protobuf::RepeatedPtrField< ::vss_state::Robot_State >*
Global_State::mutable_robots_blue() {
  return &robots_blue_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vss_state

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_state_2eproto__INCLUDED
