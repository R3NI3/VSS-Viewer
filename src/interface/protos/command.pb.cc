// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vss_command {

namespace {

const ::google::protobuf::Descriptor* Robot_Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robot_Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* Global_Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Global_Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_command_2eproto() {
  protobuf_AddDesc_command_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "command.proto");
  GOOGLE_CHECK(file != NULL);
  Robot_Command_descriptor_ = file->message_type(0);
  static const int Robot_Command_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, left_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, right_vel_),
  };
  Robot_Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Robot_Command_descriptor_,
      Robot_Command::default_instance_,
      Robot_Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, _has_bits_[0]),
      -1,
      -1,
      sizeof(Robot_Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, _internal_metadata_),
      -1);
  Global_Commands_descriptor_ = file->message_type(1);
  static const int Global_Commands_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_Commands, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_Commands, is_team_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_Commands, robot_commands_),
  };
  Global_Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Global_Commands_descriptor_,
      Global_Commands::default_instance_,
      Global_Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_Commands, _has_bits_[0]),
      -1,
      -1,
      sizeof(Global_Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_Commands, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_command_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Robot_Command_descriptor_, &Robot_Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Global_Commands_descriptor_, &Global_Commands::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_command_2eproto() {
  delete Robot_Command::default_instance_;
  delete Robot_Command_reflection_;
  delete Global_Commands::default_instance_;
  delete Global_Commands_reflection_;
}

void protobuf_AddDesc_command_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcommand.proto\022\013vss_command\"@\n\rRobot_Co"
    "mmand\022\n\n\002id\030\001 \002(\r\022\020\n\010left_vel\030\002 \002(\002\022\021\n\tr"
    "ight_vel\030\003 \002(\002\"i\n\017Global_Commands\022\n\n\002id\030"
    "\001 \001(\r\022\026\n\016is_team_yellow\030\002 \002(\010\0222\n\016robot_c"
    "ommands\030\003 \003(\0132\032.vss_command.Robot_Comman"
    "d", 201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "command.proto", &protobuf_RegisterTypes);
  Robot_Command::default_instance_ = new Robot_Command();
  Global_Commands::default_instance_ = new Global_Commands();
  Robot_Command::default_instance_->InitAsDefaultInstance();
  Global_Commands::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_command_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_command_2eproto {
  StaticDescriptorInitializer_command_2eproto() {
    protobuf_AddDesc_command_2eproto();
  }
} static_descriptor_initializer_command_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot_Command::kIdFieldNumber;
const int Robot_Command::kLeftVelFieldNumber;
const int Robot_Command::kRightVelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot_Command::Robot_Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vss_command.Robot_Command)
}

void Robot_Command::InitAsDefaultInstance() {
}

Robot_Command::Robot_Command(const Robot_Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vss_command.Robot_Command)
}

void Robot_Command::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  left_vel_ = 0;
  right_vel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Robot_Command::~Robot_Command() {
  // @@protoc_insertion_point(destructor:vss_command.Robot_Command)
  SharedDtor();
}

void Robot_Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Robot_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot_Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_Command_descriptor_;
}

const Robot_Command& Robot_Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

Robot_Command* Robot_Command::default_instance_ = NULL;

Robot_Command* Robot_Command::New(::google::protobuf::Arena* arena) const {
  Robot_Command* n = new Robot_Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Robot_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:vss_command.Robot_Command)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Robot_Command, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Robot_Command*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, right_vel_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Robot_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vss_command.Robot_Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_left_vel;
        break;
      }

      // required float left_vel = 2;
      case 2: {
        if (tag == 21) {
         parse_left_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_vel_)));
          set_has_left_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_right_vel;
        break;
      }

      // required float right_vel = 3;
      case 3: {
        if (tag == 29) {
         parse_right_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_vel_)));
          set_has_right_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vss_command.Robot_Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vss_command.Robot_Command)
  return false;
#undef DO_
}

void Robot_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vss_command.Robot_Command)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required float left_vel = 2;
  if (has_left_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->left_vel(), output);
  }

  // required float right_vel = 3;
  if (has_right_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->right_vel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vss_command.Robot_Command)
}

::google::protobuf::uint8* Robot_Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vss_command.Robot_Command)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required float left_vel = 2;
  if (has_left_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->left_vel(), target);
  }

  // required float right_vel = 3;
  if (has_right_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->right_vel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vss_command.Robot_Command)
  return target;
}

int Robot_Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:vss_command.Robot_Command)
  int total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_left_vel()) {
    // required float left_vel = 2;
    total_size += 1 + 4;
  }

  if (has_right_vel()) {
    // required float right_vel = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int Robot_Command::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vss_command.Robot_Command)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required float left_vel = 2;
    total_size += 1 + 4;

    // required float right_vel = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot_Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vss_command.Robot_Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Robot_Command* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot_Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vss_command.Robot_Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vss_command.Robot_Command)
    MergeFrom(*source);
  }
}

void Robot_Command::MergeFrom(const Robot_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vss_command.Robot_Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_left_vel()) {
      set_left_vel(from.left_vel());
    }
    if (from.has_right_vel()) {
      set_right_vel(from.right_vel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Robot_Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vss_command.Robot_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_Command::CopyFrom(const Robot_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vss_command.Robot_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Robot_Command::Swap(Robot_Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot_Command::InternalSwap(Robot_Command* other) {
  std::swap(id_, other->id_);
  std::swap(left_vel_, other->left_vel_);
  std::swap(right_vel_, other->right_vel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Robot_Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robot_Command_descriptor_;
  metadata.reflection = Robot_Command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Robot_Command

// required uint32 id = 1;
bool Robot_Command::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Robot_Command::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Robot_Command::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Robot_Command::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 Robot_Command::id() const {
  // @@protoc_insertion_point(field_get:vss_command.Robot_Command.id)
  return id_;
}
 void Robot_Command::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:vss_command.Robot_Command.id)
}

// required float left_vel = 2;
bool Robot_Command::has_left_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Robot_Command::set_has_left_vel() {
  _has_bits_[0] |= 0x00000002u;
}
void Robot_Command::clear_has_left_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
void Robot_Command::clear_left_vel() {
  left_vel_ = 0;
  clear_has_left_vel();
}
 float Robot_Command::left_vel() const {
  // @@protoc_insertion_point(field_get:vss_command.Robot_Command.left_vel)
  return left_vel_;
}
 void Robot_Command::set_left_vel(float value) {
  set_has_left_vel();
  left_vel_ = value;
  // @@protoc_insertion_point(field_set:vss_command.Robot_Command.left_vel)
}

// required float right_vel = 3;
bool Robot_Command::has_right_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Robot_Command::set_has_right_vel() {
  _has_bits_[0] |= 0x00000004u;
}
void Robot_Command::clear_has_right_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
void Robot_Command::clear_right_vel() {
  right_vel_ = 0;
  clear_has_right_vel();
}
 float Robot_Command::right_vel() const {
  // @@protoc_insertion_point(field_get:vss_command.Robot_Command.right_vel)
  return right_vel_;
}
 void Robot_Command::set_right_vel(float value) {
  set_has_right_vel();
  right_vel_ = value;
  // @@protoc_insertion_point(field_set:vss_command.Robot_Command.right_vel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Global_Commands::kIdFieldNumber;
const int Global_Commands::kIsTeamYellowFieldNumber;
const int Global_Commands::kRobotCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Global_Commands::Global_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vss_command.Global_Commands)
}

void Global_Commands::InitAsDefaultInstance() {
}

Global_Commands::Global_Commands(const Global_Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vss_command.Global_Commands)
}

void Global_Commands::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  is_team_yellow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Global_Commands::~Global_Commands() {
  // @@protoc_insertion_point(destructor:vss_command.Global_Commands)
  SharedDtor();
}

void Global_Commands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Global_Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Global_Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Global_Commands_descriptor_;
}

const Global_Commands& Global_Commands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

Global_Commands* Global_Commands::default_instance_ = NULL;

Global_Commands* Global_Commands::New(::google::protobuf::Arena* arena) const {
  Global_Commands* n = new Global_Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Global_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:vss_command.Global_Commands)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Global_Commands, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Global_Commands*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, is_team_yellow_);

#undef ZR_HELPER_
#undef ZR_

  robot_commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Global_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vss_command.Global_Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_team_yellow;
        break;
      }

      // required bool is_team_yellow = 2;
      case 2: {
        if (tag == 16) {
         parse_is_team_yellow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_team_yellow_)));
          set_has_is_team_yellow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_robot_commands;
        break;
      }

      // repeated .vss_command.Robot_Command robot_commands = 3;
      case 3: {
        if (tag == 26) {
         parse_robot_commands:
          DO_(input->IncrementRecursionDepth());
         parse_loop_robot_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_robot_commands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_robot_commands;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vss_command.Global_Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vss_command.Global_Commands)
  return false;
#undef DO_
}

void Global_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vss_command.Global_Commands)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bool is_team_yellow = 2;
  if (has_is_team_yellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_team_yellow(), output);
  }

  // repeated .vss_command.Robot_Command robot_commands = 3;
  for (unsigned int i = 0, n = this->robot_commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->robot_commands(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vss_command.Global_Commands)
}

::google::protobuf::uint8* Global_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vss_command.Global_Commands)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bool is_team_yellow = 2;
  if (has_is_team_yellow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_team_yellow(), target);
  }

  // repeated .vss_command.Robot_Command robot_commands = 3;
  for (unsigned int i = 0, n = this->robot_commands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->robot_commands(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vss_command.Global_Commands)
  return target;
}

int Global_Commands::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vss_command.Global_Commands)
  int total_size = 0;

  // required bool is_team_yellow = 2;
  if (has_is_team_yellow()) {
    total_size += 1 + 1;
  }
  // optional uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // repeated .vss_command.Robot_Command robot_commands = 3;
  total_size += 1 * this->robot_commands_size();
  for (int i = 0; i < this->robot_commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robot_commands(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Global_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vss_command.Global_Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Global_Commands* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Global_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vss_command.Global_Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vss_command.Global_Commands)
    MergeFrom(*source);
  }
}

void Global_Commands::MergeFrom(const Global_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vss_command.Global_Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  robot_commands_.MergeFrom(from.robot_commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_team_yellow()) {
      set_is_team_yellow(from.is_team_yellow());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Global_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vss_command.Global_Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global_Commands::CopyFrom(const Global_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vss_command.Global_Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global_Commands::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->robot_commands())) return false;
  return true;
}

void Global_Commands::Swap(Global_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Global_Commands::InternalSwap(Global_Commands* other) {
  std::swap(id_, other->id_);
  std::swap(is_team_yellow_, other->is_team_yellow_);
  robot_commands_.UnsafeArenaSwap(&other->robot_commands_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Global_Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Global_Commands_descriptor_;
  metadata.reflection = Global_Commands_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Global_Commands

// optional uint32 id = 1;
bool Global_Commands::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Global_Commands::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Global_Commands::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Global_Commands::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 Global_Commands::id() const {
  // @@protoc_insertion_point(field_get:vss_command.Global_Commands.id)
  return id_;
}
 void Global_Commands::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:vss_command.Global_Commands.id)
}

// required bool is_team_yellow = 2;
bool Global_Commands::has_is_team_yellow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Global_Commands::set_has_is_team_yellow() {
  _has_bits_[0] |= 0x00000002u;
}
void Global_Commands::clear_has_is_team_yellow() {
  _has_bits_[0] &= ~0x00000002u;
}
void Global_Commands::clear_is_team_yellow() {
  is_team_yellow_ = false;
  clear_has_is_team_yellow();
}
 bool Global_Commands::is_team_yellow() const {
  // @@protoc_insertion_point(field_get:vss_command.Global_Commands.is_team_yellow)
  return is_team_yellow_;
}
 void Global_Commands::set_is_team_yellow(bool value) {
  set_has_is_team_yellow();
  is_team_yellow_ = value;
  // @@protoc_insertion_point(field_set:vss_command.Global_Commands.is_team_yellow)
}

// repeated .vss_command.Robot_Command robot_commands = 3;
int Global_Commands::robot_commands_size() const {
  return robot_commands_.size();
}
void Global_Commands::clear_robot_commands() {
  robot_commands_.Clear();
}
const ::vss_command::Robot_Command& Global_Commands::robot_commands(int index) const {
  // @@protoc_insertion_point(field_get:vss_command.Global_Commands.robot_commands)
  return robot_commands_.Get(index);
}
::vss_command::Robot_Command* Global_Commands::mutable_robot_commands(int index) {
  // @@protoc_insertion_point(field_mutable:vss_command.Global_Commands.robot_commands)
  return robot_commands_.Mutable(index);
}
::vss_command::Robot_Command* Global_Commands::add_robot_commands() {
  // @@protoc_insertion_point(field_add:vss_command.Global_Commands.robot_commands)
  return robot_commands_.Add();
}
::google::protobuf::RepeatedPtrField< ::vss_command::Robot_Command >*
Global_Commands::mutable_robot_commands() {
  // @@protoc_insertion_point(field_mutable_list:vss_command.Global_Commands.robot_commands)
  return &robot_commands_;
}
const ::google::protobuf::RepeatedPtrField< ::vss_command::Robot_Command >&
Global_Commands::robot_commands() const {
  // @@protoc_insertion_point(field_list:vss_command.Global_Commands.robot_commands)
  return robot_commands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace vss_command

// @@protoc_insertion_point(global_scope)
