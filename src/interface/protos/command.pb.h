// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef PROTOBUF_command_2eproto__INCLUDED
#define PROTOBUF_command_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace vss_command {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_command_2eproto();
void protobuf_AssignDesc_command_2eproto();
void protobuf_ShutdownFile_command_2eproto();

class Robot_Command;
class Global_Commands;

// ===================================================================

class Robot_Command : public ::google::protobuf::Message {
 public:
  Robot_Command();
  virtual ~Robot_Command();

  Robot_Command(const Robot_Command& from);

  inline Robot_Command& operator=(const Robot_Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot_Command& default_instance();

  void Swap(Robot_Command* other);

  // implements Message ----------------------------------------------

  Robot_Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Robot_Command& from);
  void MergeFrom(const Robot_Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required float left_vel = 2;
  inline bool has_left_vel() const;
  inline void clear_left_vel();
  static const int kLeftVelFieldNumber = 2;
  inline float left_vel() const;
  inline void set_left_vel(float value);

  // required float right_vel = 3;
  inline bool has_right_vel() const;
  inline void clear_right_vel();
  static const int kRightVelFieldNumber = 3;
  inline float right_vel() const;
  inline void set_right_vel(float value);

  // @@protoc_insertion_point(class_scope:vss_command.Robot_Command)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_left_vel();
  inline void clear_has_left_vel();
  inline void set_has_right_vel();
  inline void clear_has_right_vel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  float left_vel_;
  float right_vel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Robot_Command* default_instance_;
};
// -------------------------------------------------------------------

class Global_Commands : public ::google::protobuf::Message {
 public:
  Global_Commands();
  virtual ~Global_Commands();

  Global_Commands(const Global_Commands& from);

  inline Global_Commands& operator=(const Global_Commands& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Global_Commands& default_instance();

  void Swap(Global_Commands* other);

  // implements Message ----------------------------------------------

  Global_Commands* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Global_Commands& from);
  void MergeFrom(const Global_Commands& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required bool is_team_yellow = 2;
  inline bool has_is_team_yellow() const;
  inline void clear_is_team_yellow();
  static const int kIsTeamYellowFieldNumber = 2;
  inline bool is_team_yellow() const;
  inline void set_is_team_yellow(bool value);

  // repeated .vss_command.Robot_Command robot_commands = 3;
  inline int robot_commands_size() const;
  inline void clear_robot_commands();
  static const int kRobotCommandsFieldNumber = 3;
  inline const ::vss_command::Robot_Command& robot_commands(int index) const;
  inline ::vss_command::Robot_Command* mutable_robot_commands(int index);
  inline ::vss_command::Robot_Command* add_robot_commands();
  inline const ::google::protobuf::RepeatedPtrField< ::vss_command::Robot_Command >&
      robot_commands() const;
  inline ::google::protobuf::RepeatedPtrField< ::vss_command::Robot_Command >*
      mutable_robot_commands();

  // @@protoc_insertion_point(class_scope:vss_command.Global_Commands)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_is_team_yellow();
  inline void clear_has_is_team_yellow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  bool is_team_yellow_;
  ::google::protobuf::RepeatedPtrField< ::vss_command::Robot_Command > robot_commands_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Global_Commands* default_instance_;
};
// ===================================================================


// ===================================================================

// Robot_Command

// required uint32 id = 1;
inline bool Robot_Command::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Robot_Command::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Robot_Command::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Robot_Command::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Robot_Command::id() const {
  return id_;
}
inline void Robot_Command::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required float left_vel = 2;
inline bool Robot_Command::has_left_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robot_Command::set_has_left_vel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Robot_Command::clear_has_left_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Robot_Command::clear_left_vel() {
  left_vel_ = 0;
  clear_has_left_vel();
}
inline float Robot_Command::left_vel() const {
  return left_vel_;
}
inline void Robot_Command::set_left_vel(float value) {
  set_has_left_vel();
  left_vel_ = value;
}

// required float right_vel = 3;
inline bool Robot_Command::has_right_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Robot_Command::set_has_right_vel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Robot_Command::clear_has_right_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Robot_Command::clear_right_vel() {
  right_vel_ = 0;
  clear_has_right_vel();
}
inline float Robot_Command::right_vel() const {
  return right_vel_;
}
inline void Robot_Command::set_right_vel(float value) {
  set_has_right_vel();
  right_vel_ = value;
}

// -------------------------------------------------------------------

// Global_Commands

// optional uint32 id = 1;
inline bool Global_Commands::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Global_Commands::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Global_Commands::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Global_Commands::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Global_Commands::id() const {
  return id_;
}
inline void Global_Commands::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required bool is_team_yellow = 2;
inline bool Global_Commands::has_is_team_yellow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Global_Commands::set_has_is_team_yellow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Global_Commands::clear_has_is_team_yellow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Global_Commands::clear_is_team_yellow() {
  is_team_yellow_ = false;
  clear_has_is_team_yellow();
}
inline bool Global_Commands::is_team_yellow() const {
  return is_team_yellow_;
}
inline void Global_Commands::set_is_team_yellow(bool value) {
  set_has_is_team_yellow();
  is_team_yellow_ = value;
}

// repeated .vss_command.Robot_Command robot_commands = 3;
inline int Global_Commands::robot_commands_size() const {
  return robot_commands_.size();
}
inline void Global_Commands::clear_robot_commands() {
  robot_commands_.Clear();
}
inline const ::vss_command::Robot_Command& Global_Commands::robot_commands(int index) const {
  return robot_commands_.Get(index);
}
inline ::vss_command::Robot_Command* Global_Commands::mutable_robot_commands(int index) {
  return robot_commands_.Mutable(index);
}
inline ::vss_command::Robot_Command* Global_Commands::add_robot_commands() {
  return robot_commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vss_command::Robot_Command >&
Global_Commands::robot_commands() const {
  return robot_commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::vss_command::Robot_Command >*
Global_Commands::mutable_robot_commands() {
  return &robot_commands_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vss_command

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_command_2eproto__INCLUDED
