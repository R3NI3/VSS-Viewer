// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vss_state {

namespace {

const ::google::protobuf::Descriptor* Robot_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robot_State_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ball_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ball_State_reflection_ = NULL;
const ::google::protobuf::Descriptor* Global_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Global_State_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_state_2eproto() {
  protobuf_AddDesc_state_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "state.proto");
  GOOGLE_CHECK(file != NULL);
  Robot_State_descriptor_ = file->message_type(0);
  static const int Robot_State_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_State, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_State, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_State, yaw_),
  };
  Robot_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Robot_State_descriptor_,
      Robot_State::default_instance_,
      Robot_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Robot_State));
  Ball_State_descriptor_ = file->message_type(1);
  static const int Ball_State_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_State, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_State, y_),
  };
  Ball_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ball_State_descriptor_,
      Ball_State::default_instance_,
      Ball_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ball_State));
  Global_State_descriptor_ = file->message_type(2);
  static const int Global_State_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, balls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, robots_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, robots_blue_),
  };
  Global_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Global_State_descriptor_,
      Global_State::default_instance_,
      Global_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Global_State));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_state_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Robot_State_descriptor_, &Robot_State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ball_State_descriptor_, &Ball_State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Global_State_descriptor_, &Global_State::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_state_2eproto() {
  delete Robot_State::default_instance_;
  delete Robot_State_reflection_;
  delete Ball_State::default_instance_;
  delete Ball_State_reflection_;
  delete Global_State::default_instance_;
  delete Global_State_reflection_;
}

void protobuf_AddDesc_state_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013state.proto\022\tvss_state\"0\n\013Robot_State\022"
    "\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\013\n\003yaw\030\003 \001(\002\"\"\n\nBa"
    "ll_State\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\234\001\n\014Globa"
    "l_State\022\n\n\002id\030\001 \001(\r\022$\n\005balls\030\002 \003(\0132\025.vss"
    "_state.Ball_State\022-\n\rrobots_yellow\030\003 \003(\013"
    "2\026.vss_state.Robot_State\022+\n\013robots_blue\030"
    "\004 \003(\0132\026.vss_state.Robot_State", 269);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "state.proto", &protobuf_RegisterTypes);
  Robot_State::default_instance_ = new Robot_State();
  Ball_State::default_instance_ = new Ball_State();
  Global_State::default_instance_ = new Global_State();
  Robot_State::default_instance_->InitAsDefaultInstance();
  Ball_State::default_instance_->InitAsDefaultInstance();
  Global_State::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_state_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_state_2eproto {
  StaticDescriptorInitializer_state_2eproto() {
    protobuf_AddDesc_state_2eproto();
  }
} static_descriptor_initializer_state_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Robot_State::kXFieldNumber;
const int Robot_State::kYFieldNumber;
const int Robot_State::kYawFieldNumber;
#endif  // !_MSC_VER

Robot_State::Robot_State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Robot_State::InitAsDefaultInstance() {
}

Robot_State::Robot_State(const Robot_State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Robot_State::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Robot_State::~Robot_State() {
  SharedDtor();
}

void Robot_State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Robot_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_State_descriptor_;
}

const Robot_State& Robot_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_state_2eproto();
  return *default_instance_;
}

Robot_State* Robot_State::default_instance_ = NULL;

Robot_State* Robot_State::New() const {
  return new Robot_State;
}

void Robot_State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    yaw_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Robot_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_yaw;
        break;
      }

      // optional float yaw = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Robot_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float yaw = 3;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Robot_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float yaw = 3;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Robot_State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float yaw = 3;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Robot_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Robot_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Robot_State::MergeFrom(const Robot_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Robot_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_State::CopyFrom(const Robot_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Robot_State::Swap(Robot_State* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(yaw_, other->yaw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Robot_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robot_State_descriptor_;
  metadata.reflection = Robot_State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ball_State::kXFieldNumber;
const int Ball_State::kYFieldNumber;
#endif  // !_MSC_VER

Ball_State::Ball_State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ball_State::InitAsDefaultInstance() {
}

Ball_State::Ball_State(const Ball_State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ball_State::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ball_State::~Ball_State() {
  SharedDtor();
}

void Ball_State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ball_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ball_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ball_State_descriptor_;
}

const Ball_State& Ball_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_state_2eproto();
  return *default_instance_;
}

Ball_State* Ball_State::default_instance_ = NULL;

Ball_State* Ball_State::New() const {
  return new Ball_State;
}

void Ball_State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ball_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ball_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ball_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ball_State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ball_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ball_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ball_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ball_State::MergeFrom(const Ball_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ball_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball_State::CopyFrom(const Ball_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball_State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Ball_State::Swap(Ball_State* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ball_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ball_State_descriptor_;
  metadata.reflection = Ball_State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Global_State::kIdFieldNumber;
const int Global_State::kBallsFieldNumber;
const int Global_State::kRobotsYellowFieldNumber;
const int Global_State::kRobotsBlueFieldNumber;
#endif  // !_MSC_VER

Global_State::Global_State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Global_State::InitAsDefaultInstance() {
}

Global_State::Global_State(const Global_State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Global_State::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Global_State::~Global_State() {
  SharedDtor();
}

void Global_State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Global_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Global_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Global_State_descriptor_;
}

const Global_State& Global_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_state_2eproto();
  return *default_instance_;
}

Global_State* Global_State::default_instance_ = NULL;

Global_State* Global_State::New() const {
  return new Global_State;
}

void Global_State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  balls_.Clear();
  robots_yellow_.Clear();
  robots_blue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Global_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_balls;
        break;
      }

      // repeated .vss_state.Ball_State balls = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_balls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_balls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_balls;
        if (input->ExpectTag(26)) goto parse_robots_yellow;
        break;
      }

      // repeated .vss_state.Robot_State robots_yellow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robots_yellow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots_yellow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_robots_yellow;
        if (input->ExpectTag(34)) goto parse_robots_blue;
        break;
      }

      // repeated .vss_state.Robot_State robots_blue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robots_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots_blue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_robots_blue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Global_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .vss_state.Ball_State balls = 2;
  for (int i = 0; i < this->balls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->balls(i), output);
  }

  // repeated .vss_state.Robot_State robots_yellow = 3;
  for (int i = 0; i < this->robots_yellow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->robots_yellow(i), output);
  }

  // repeated .vss_state.Robot_State robots_blue = 4;
  for (int i = 0; i < this->robots_blue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->robots_blue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Global_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .vss_state.Ball_State balls = 2;
  for (int i = 0; i < this->balls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->balls(i), target);
  }

  // repeated .vss_state.Robot_State robots_yellow = 3;
  for (int i = 0; i < this->robots_yellow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->robots_yellow(i), target);
  }

  // repeated .vss_state.Robot_State robots_blue = 4;
  for (int i = 0; i < this->robots_blue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->robots_blue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Global_State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .vss_state.Ball_State balls = 2;
  total_size += 1 * this->balls_size();
  for (int i = 0; i < this->balls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->balls(i));
  }

  // repeated .vss_state.Robot_State robots_yellow = 3;
  total_size += 1 * this->robots_yellow_size();
  for (int i = 0; i < this->robots_yellow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots_yellow(i));
  }

  // repeated .vss_state.Robot_State robots_blue = 4;
  total_size += 1 * this->robots_blue_size();
  for (int i = 0; i < this->robots_blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots_blue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Global_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Global_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Global_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Global_State::MergeFrom(const Global_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  balls_.MergeFrom(from.balls_);
  robots_yellow_.MergeFrom(from.robots_yellow_);
  robots_blue_.MergeFrom(from.robots_blue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Global_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global_State::CopyFrom(const Global_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global_State::IsInitialized() const {

  for (int i = 0; i < balls_size(); i++) {
    if (!this->balls(i).IsInitialized()) return false;
  }
  for (int i = 0; i < robots_yellow_size(); i++) {
    if (!this->robots_yellow(i).IsInitialized()) return false;
  }
  for (int i = 0; i < robots_blue_size(); i++) {
    if (!this->robots_blue(i).IsInitialized()) return false;
  }
  return true;
}

void Global_State::Swap(Global_State* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    balls_.Swap(&other->balls_);
    robots_yellow_.Swap(&other->robots_yellow_);
    robots_blue_.Swap(&other->robots_blue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Global_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Global_State_descriptor_;
  metadata.reflection = Global_State_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vss_state

// @@protoc_insertion_point(global_scope)
